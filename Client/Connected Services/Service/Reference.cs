//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RouteSheet", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class RouteSheet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BarcodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.Service.RouteMark[] RouteMarksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RouteSheetIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Barcode {
            get {
                return this.BarcodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BarcodeField, value) != true)) {
                    this.BarcodeField = value;
                    this.RaisePropertyChanged("Barcode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.Service.RouteMark[] RouteMarks {
            get {
                return this.RouteMarksField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteMarksField, value) != true)) {
                    this.RouteMarksField = value;
                    this.RaisePropertyChanged("RouteMarks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RouteSheetId {
            get {
                return this.RouteSheetIdField;
            }
            set {
                if ((this.RouteSheetIdField.Equals(value) != true)) {
                    this.RouteSheetIdField = value;
                    this.RaisePropertyChanged("RouteSheetId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RouteMark", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class RouteMark : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RouteMarkIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.Service.RoutePoint RoutePointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoutePointIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.Service.RouteSheet RouteSheetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RouteSheetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RouteMarkId {
            get {
                return this.RouteMarkIdField;
            }
            set {
                if ((this.RouteMarkIdField.Equals(value) != true)) {
                    this.RouteMarkIdField = value;
                    this.RaisePropertyChanged("RouteMarkId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.Service.RoutePoint RoutePoint {
            get {
                return this.RoutePointField;
            }
            set {
                if ((object.ReferenceEquals(this.RoutePointField, value) != true)) {
                    this.RoutePointField = value;
                    this.RaisePropertyChanged("RoutePoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoutePointId {
            get {
                return this.RoutePointIdField;
            }
            set {
                if ((this.RoutePointIdField.Equals(value) != true)) {
                    this.RoutePointIdField = value;
                    this.RaisePropertyChanged("RoutePointId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.Service.RouteSheet RouteSheet {
            get {
                return this.RouteSheetField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteSheetField, value) != true)) {
                    this.RouteSheetField = value;
                    this.RaisePropertyChanged("RouteSheet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RouteSheetId {
            get {
                return this.RouteSheetIdField;
            }
            set {
                if ((this.RouteSheetIdField.Equals(value) != true)) {
                    this.RouteSheetIdField = value;
                    this.RaisePropertyChanged("RouteSheetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Stamp {
            get {
                return this.StampField;
            }
            set {
                if ((this.StampField.Equals(value) != true)) {
                    this.StampField = value;
                    this.RaisePropertyChanged("Stamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoutePoint", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class RoutePoint : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.Service.RouteMark[] RouteMarksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoutePointIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.Service.RouteMark[] RouteMarks {
            get {
                return this.RouteMarksField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteMarksField, value) != true)) {
                    this.RouteMarksField = value;
                    this.RaisePropertyChanged("RouteMarks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoutePointId {
            get {
                return this.RoutePointIdField;
            }
            set {
                if ((this.RoutePointIdField.Equals(value) != true)) {
                    this.RoutePointIdField = value;
                    this.RaisePropertyChanged("RoutePointId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertRouteSheet", ReplyAction="http://tempuri.org/IService/InsertRouteSheetResponse")]
        int InsertRouteSheet(Client.Service.RouteSheet routeSheet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertRouteSheet", ReplyAction="http://tempuri.org/IService/InsertRouteSheetResponse")]
        System.Threading.Tasks.Task<int> InsertRouteSheetAsync(Client.Service.RouteSheet routeSheet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateRouteSheet", ReplyAction="http://tempuri.org/IService/UpdateRouteSheetResponse")]
        void UpdateRouteSheet(Client.Service.RouteSheet routeSheet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateRouteSheet", ReplyAction="http://tempuri.org/IService/UpdateRouteSheetResponse")]
        System.Threading.Tasks.Task UpdateRouteSheetAsync(Client.Service.RouteSheet routeSheet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteRouteSheet", ReplyAction="http://tempuri.org/IService/DeleteRouteSheetResponse")]
        void DeleteRouteSheet(int routeSheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteRouteSheet", ReplyAction="http://tempuri.org/IService/DeleteRouteSheetResponse")]
        System.Threading.Tasks.Task DeleteRouteSheetAsync(int routeSheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoadRouteSheetList", ReplyAction="http://tempuri.org/IService/LoadRouteSheetListResponse")]
        Client.Service.RouteSheet[] LoadRouteSheetList(System.DateTime periodBegin, System.DateTime periodEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoadRouteSheetList", ReplyAction="http://tempuri.org/IService/LoadRouteSheetListResponse")]
        System.Threading.Tasks.Task<Client.Service.RouteSheet[]> LoadRouteSheetListAsync(System.DateTime periodBegin, System.DateTime periodEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertRouteMark", ReplyAction="http://tempuri.org/IService/InsertRouteMarkResponse")]
        int InsertRouteMark(Client.Service.RouteMark routeMark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertRouteMark", ReplyAction="http://tempuri.org/IService/InsertRouteMarkResponse")]
        System.Threading.Tasks.Task<int> InsertRouteMarkAsync(Client.Service.RouteMark routeMark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateRouteMark", ReplyAction="http://tempuri.org/IService/UpdateRouteMarkResponse")]
        void UpdateRouteMark(Client.Service.RouteMark routeMark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateRouteMark", ReplyAction="http://tempuri.org/IService/UpdateRouteMarkResponse")]
        System.Threading.Tasks.Task UpdateRouteMarkAsync(Client.Service.RouteMark routeMark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteRouteMark", ReplyAction="http://tempuri.org/IService/DeleteRouteMarkResponse")]
        void DeleteRouteMark(int routeMarkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteRouteMark", ReplyAction="http://tempuri.org/IService/DeleteRouteMarkResponse")]
        System.Threading.Tasks.Task DeleteRouteMarkAsync(int routeMarkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoadRouteMarkList", ReplyAction="http://tempuri.org/IService/LoadRouteMarkListResponse")]
        Client.Service.RouteMark[] LoadRouteMarkList(int routeSheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoadRouteMarkList", ReplyAction="http://tempuri.org/IService/LoadRouteMarkListResponse")]
        System.Threading.Tasks.Task<Client.Service.RouteMark[]> LoadRouteMarkListAsync(int routeSheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertRoutePoint", ReplyAction="http://tempuri.org/IService/InsertRoutePointResponse")]
        int InsertRoutePoint(Client.Service.RoutePoint routePoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertRoutePoint", ReplyAction="http://tempuri.org/IService/InsertRoutePointResponse")]
        System.Threading.Tasks.Task<int> InsertRoutePointAsync(Client.Service.RoutePoint routePoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateRoutePoint", ReplyAction="http://tempuri.org/IService/UpdateRoutePointResponse")]
        void UpdateRoutePoint(Client.Service.RoutePoint routePoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateRoutePoint", ReplyAction="http://tempuri.org/IService/UpdateRoutePointResponse")]
        System.Threading.Tasks.Task UpdateRoutePointAsync(Client.Service.RoutePoint routePoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteRoutePoint", ReplyAction="http://tempuri.org/IService/DeleteRoutePointResponse")]
        void DeleteRoutePoint(int routePointId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteRoutePoint", ReplyAction="http://tempuri.org/IService/DeleteRoutePointResponse")]
        System.Threading.Tasks.Task DeleteRoutePointAsync(int routePointId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoadRoutePointList", ReplyAction="http://tempuri.org/IService/LoadRoutePointListResponse")]
        Client.Service.RoutePoint[] LoadRoutePointList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoadRoutePointList", ReplyAction="http://tempuri.org/IService/LoadRoutePointListResponse")]
        System.Threading.Tasks.Task<Client.Service.RoutePoint[]> LoadRoutePointListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.Service.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Client.Service.IService>, Client.Service.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int InsertRouteSheet(Client.Service.RouteSheet routeSheet) {
            return base.Channel.InsertRouteSheet(routeSheet);
        }
        
        public System.Threading.Tasks.Task<int> InsertRouteSheetAsync(Client.Service.RouteSheet routeSheet) {
            return base.Channel.InsertRouteSheetAsync(routeSheet);
        }
        
        public void UpdateRouteSheet(Client.Service.RouteSheet routeSheet) {
            base.Channel.UpdateRouteSheet(routeSheet);
        }
        
        public System.Threading.Tasks.Task UpdateRouteSheetAsync(Client.Service.RouteSheet routeSheet) {
            return base.Channel.UpdateRouteSheetAsync(routeSheet);
        }
        
        public void DeleteRouteSheet(int routeSheetId) {
            base.Channel.DeleteRouteSheet(routeSheetId);
        }
        
        public System.Threading.Tasks.Task DeleteRouteSheetAsync(int routeSheetId) {
            return base.Channel.DeleteRouteSheetAsync(routeSheetId);
        }
        
        public Client.Service.RouteSheet[] LoadRouteSheetList(System.DateTime periodBegin, System.DateTime periodEnd) {
            return base.Channel.LoadRouteSheetList(periodBegin, periodEnd);
        }
        
        public System.Threading.Tasks.Task<Client.Service.RouteSheet[]> LoadRouteSheetListAsync(System.DateTime periodBegin, System.DateTime periodEnd) {
            return base.Channel.LoadRouteSheetListAsync(periodBegin, periodEnd);
        }
        
        public int InsertRouteMark(Client.Service.RouteMark routeMark) {
            return base.Channel.InsertRouteMark(routeMark);
        }
        
        public System.Threading.Tasks.Task<int> InsertRouteMarkAsync(Client.Service.RouteMark routeMark) {
            return base.Channel.InsertRouteMarkAsync(routeMark);
        }
        
        public void UpdateRouteMark(Client.Service.RouteMark routeMark) {
            base.Channel.UpdateRouteMark(routeMark);
        }
        
        public System.Threading.Tasks.Task UpdateRouteMarkAsync(Client.Service.RouteMark routeMark) {
            return base.Channel.UpdateRouteMarkAsync(routeMark);
        }
        
        public void DeleteRouteMark(int routeMarkId) {
            base.Channel.DeleteRouteMark(routeMarkId);
        }
        
        public System.Threading.Tasks.Task DeleteRouteMarkAsync(int routeMarkId) {
            return base.Channel.DeleteRouteMarkAsync(routeMarkId);
        }
        
        public Client.Service.RouteMark[] LoadRouteMarkList(int routeSheetId) {
            return base.Channel.LoadRouteMarkList(routeSheetId);
        }
        
        public System.Threading.Tasks.Task<Client.Service.RouteMark[]> LoadRouteMarkListAsync(int routeSheetId) {
            return base.Channel.LoadRouteMarkListAsync(routeSheetId);
        }
        
        public int InsertRoutePoint(Client.Service.RoutePoint routePoint) {
            return base.Channel.InsertRoutePoint(routePoint);
        }
        
        public System.Threading.Tasks.Task<int> InsertRoutePointAsync(Client.Service.RoutePoint routePoint) {
            return base.Channel.InsertRoutePointAsync(routePoint);
        }
        
        public void UpdateRoutePoint(Client.Service.RoutePoint routePoint) {
            base.Channel.UpdateRoutePoint(routePoint);
        }
        
        public System.Threading.Tasks.Task UpdateRoutePointAsync(Client.Service.RoutePoint routePoint) {
            return base.Channel.UpdateRoutePointAsync(routePoint);
        }
        
        public void DeleteRoutePoint(int routePointId) {
            base.Channel.DeleteRoutePoint(routePointId);
        }
        
        public System.Threading.Tasks.Task DeleteRoutePointAsync(int routePointId) {
            return base.Channel.DeleteRoutePointAsync(routePointId);
        }
        
        public Client.Service.RoutePoint[] LoadRoutePointList() {
            return base.Channel.LoadRoutePointList();
        }
        
        public System.Threading.Tasks.Task<Client.Service.RoutePoint[]> LoadRoutePointListAsync() {
            return base.Channel.LoadRoutePointListAsync();
        }
    }
}

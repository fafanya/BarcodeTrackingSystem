// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Service;

namespace Service.Migrations
{
    [DbContext(typeof(ServiceContext))]
    partial class ServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Service.RouteMark", b =>
                {
                    b.Property<int>("RouteMarkId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoutePointId");

                    b.Property<int>("RouteSheetId");

                    b.Property<DateTime>("Stamp");

                    b.HasKey("RouteMarkId");

                    b.HasIndex("RoutePointId");

                    b.HasIndex("RouteSheetId");

                    b.ToTable("RouteMarks");
                });

            modelBuilder.Entity("Service.RoutePoint", b =>
                {
                    b.Property<int>("RoutePointId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("RoutePointId");

                    b.ToTable("RoutePoints");
                });

            modelBuilder.Entity("Service.RouteSheet", b =>
                {
                    b.Property<int>("RouteSheetId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode");

                    b.HasKey("RouteSheetId");

                    b.ToTable("RouteSheets");
                });

            modelBuilder.Entity("Service.RouteMark", b =>
                {
                    b.HasOne("Service.RoutePoint", "RoutePoint")
                        .WithMany("RouteMarks")
                        .HasForeignKey("RoutePointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Service.RouteSheet", "RouteSheet")
                        .WithMany("RouteMarks")
                        .HasForeignKey("RouteSheetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
